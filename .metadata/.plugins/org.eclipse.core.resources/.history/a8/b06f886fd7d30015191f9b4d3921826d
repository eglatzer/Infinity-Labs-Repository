package com.ilad.heap;

import java.util.ArrayList;

public class Heap<E extends Comparable<E>> {
	private ArrayList<E> heap;
	private boolean isMinHeap;
	
	// Constructors
	public Heap() {
		isMinHeap = true;
	}
	
	public Heap(boolean isMinHeap_) {
		isMinHeap = isMinHeap_;
	}

	// Getter
	public boolean isMinHeap() {
		return isMinHeap;
	}

	public boolean add(E element) {
		if(heap.add(element)) {
			setUp(element);
			return true;
		}
		return false;
	}
	
	private void setUp(E element) {
		int index = heap.size() - 1;
		
		if(isMinHeap) {
			while(0 != index && 0 < heap.get((index - 1) / 2).compareTo(element)) {
				swap(index, (index - 1) / 2);
				index = (index - 1) / 2;
			}
		}
		else {
			while(0 != index && 0 > heap.get((index - 1) / 2).compareTo(element)) {
				swap(index, (index - 1) / 2);
				index = (index - 1) / 2;
			}
		}
	}
	
//	public void 

	private void swap(int index1, int index2) {
		E temp = heap.get(index1);
		heap.set(index1, heap.get(index2));
		heap.set(index2, temp);
	}
}
